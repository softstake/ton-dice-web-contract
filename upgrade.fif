#!/usr/bin/fift -s

"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <smc-address> <filename-base> [<code-fif>]" cr
  ."Upgrade code a dice game contract, with private key loaded from <filename-base>.pk ('owner.pk' by default)." cr
} : usage

$# 2 < ' usage if // Checks that there's enough arguments

false constant bounce
65536 constant timeout   // init query times out in 65536 seconds

// Parsing command-line arguments

$1 bounce parse-load-address =: bounce 2=: dest_addr
def? $2 { @' $2 } { "owner" } cond constant file-base
def? $3 { @' $3 } { "dice-compiled" } cond +".fif" include constant contract-code

"dice-upgrade-binary" =: save-file

file-base +".pk" load-generate-keypair
=: private-key
=: public-key

// dictnew constant init-dict

// 0 =: next-id

// <b init-dict dict, 0 64 u, public-key B, init-dict dict, 0 Gram, next-id 32 u, b> // initial persistance data
// null
// no libraries
// <b b{0011} s, contract-code ref, rot ref, swap dict, b> // StateInit: code, data, libs

// dup hashu wc swap 2constant smartcont-addr // create address == hash(StateInit)

now timeout + 32 << <b x{33333333} s, contract-code ref, b> hashu 32 1<<1- and + =: query-id

<b query-id 64 u, x{33333333} s, contract-code ref, b> // body
dup hashu private-key ed25519_sign_uint // create signature of body

<b b{1000100} s, dest_addr addr, 0 Gram, b{00} s, swap B, swap ref, b>

// <b b{1000100} s, dest_addr addr, b{000010} s, 3 roll <s s, b{0} s, swap B, swap ref, b> // enveloping message

// save to binary file

2 boc+>B dup Bx. cr
save-file +".boc" tuck B>file
."(Saved to file " type .")" cr

// about info

."addr" dest_addr .addr
."Non-bounceable address (for init): " dest_addr 7 .Addr cr
."Bounceable address (for later access): " dest_addr 6 .Addr cr

dest_addr file-base +".addr" save-address-verbose