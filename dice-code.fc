int parse_number(int x) inline_ref {
    throw_if(35, (x < 48) | (x > 57));
    return x - 48;
}

int pow(int x, int y) inline_ref {
    if (y == 0) {
        return 1;
    }
    int res = 1;
    do {
        y -= 1;
        res *= x;
    } until(y == 0);

    return res;
}

slice num_to_str(int x) inline_ref {
  builder b = begin_cell();
  do {
    (x, int y) = x /% 10;
    builder b' = begin_cell().store_uint(y + 48, 8);
    b = concat_builders(b', b);
  } until (x == 0);
  return b.end_cell().begin_parse();
}

int str_to_num(slice s) inline_ref {
  int res = 0;
  int cbits = slice_bits(s);
  int n = cbits / 8;
  do {
    n -= 1;
    int code = s~load_uint(8);
    int dig = parse_number(code);
    res += dig * pow(10, n);
  } until (n == 0);

  return res;
}

int is_sep(int code, int sep) inline_ref {
  if (code == sep) {
      return true;
  }
  return false;
}

(slice, int) slice_to_sep(slice s, int start) {
  int max = slice_bits(s);
  throw_if(42, start >= max);
  int offset = 0;
  do {
    int break = false; 
    slice tmp = sub_str(s, start + offset, 8);
    int code = tmp~load_uint(8);
    int sep? = is_sep(code, 44); ;; comma sep
    if (sep?) {
      break = true;
    } else {
      offset += 8;
    }
    if (start + offset >= max) {
      break = true;
    }
  } until (break);

  return (sub_str(s, start, offset), start + offset);
}

int slice_equal(s1, s2) {
  return slice_hash(s1) == slice_hash(s2);
}

slice decode(slice s) {
    int size = slice_bits(s);
    throw_if(40, size != 384);
    int count = size / 8;
    builder res = begin_cell();
    do {
        int num = s~load_uint(8);
        if ((num >= 65) & (num <= 90)) {
            num -= 65;
        } elseif ((num >= 97) & (num <= 122)) {
            num -= 71;
        } elseif ((num >= 48) & (num <= 57)) {
            num += 4;
        } elseif (num == 95) {
            num = 63;
        } elseif (num == 45) {
            num = 62;
        }
        res~store_uint(num, 6);
        count -= 1;
    } until(count == 0);
    return end_cell(res).begin_parse();
}

(int, int, cell, int, int) load_data() inline_ref {
  var ds = get_data().begin_parse();
  var res = (ds~load_uint(32), ds~load_uint(256), ds~load_dict(), ds~load_grams(), ds~load_uint(32)); ;; seqno pubk queue locked next_id
  ds.end_parse();
  return res;
}

(slice, int) get_bet?(int id) inline_ref {
  var (_, _, queue, _, _) = load_data();
  return queue.udict_get?(32, id);
}

_ unpack_bet(slice bet) inline_ref {
  var res = (bet~load_uint(8), bet~load_grams(), bet~load_msg_addr(), bet~load_msg_addr(), bet~load_grams(), bet~load_uint(256));
  bet.end_parse();
  return res;
}

() resolve_bet(int seqno, int public_key, cell queue, int locked, int next_id, int bet_id, slice sig) impure inline_ref {
  var (bet, found) = queue.udict_get?(32, bet_id);
  throw_unless(61, found);

  int roll_under = bet~load_uint(8);
  int amount = bet~load_grams();
  slice player_addr = bet~load_msg_addr();
  slice ref_addr = bet~load_msg_addr();
  int ref_bonus = bet~load_grams();
  int seed = bet~load_uint(256);
  throw_unless(34, check_signature(seed, sig, public_key));

  int fee = 4;

  int possible_payout = amount * (((100 - fee) * 1000000000) / (roll_under - 1)) / 1000000000;
  int final_seed = slice_hash(sig);
  int random_roll = final_seed % 100 + 1;

  accept_message();

  (queue, int ok) = queue.udict_delete?(32, bet_id);
  throw_unless(62, ok);

  int payout = 1;
  int mode = 1;
  cell part_ref = begin_cell().store_uint(0x5D20596F7572206E756D62657220697320, 136).store_slice(num_to_str(roll_under)).store_uint(0x2C20616C6C206E756D626572732067726561746572207468616E20, 216).store_slice(num_to_str(random_roll)).store_uint(0x206861766520776F6E2E, 80).end_cell();
  slice body = begin_cell().store_uint(0x544F4E4245542E494F202D205B23, 112).store_slice(num_to_str(bet_id)).store_ref(part_ref).end_cell().begin_parse();

  if (random_roll < roll_under) {
    payout += possible_payout;
    mode = 2;
  }

  var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(player_addr)
      .store_grams(payout)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0, 32)
      .store_slice(body);
    send_raw_message(msg.end_cell(), mode);

  locked -= possible_payout;

  set_data(begin_cell().store_uint(seqno, 32).store_uint(public_key, 256).store_dict(queue).store_grams(locked).store_uint(next_id, 32).end_cell());
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  var s_addr = cs~load_msg_addr();

  int size = slice_bits(in_msg);
  if (size < 33) {
    throw_if(0, true);
  }

  throw_if(42, msg_value < 100000000);

  var (part1, n) = slice_to_sep(in_msg, 32); ;; roll_under
  n += 8;

  int fee = 4;
  int ref_bonus = 0;
  slice ref_addr = my_address();
  if (n < size) {
    int valid_size = size - n;
    throw_if(40, valid_size != 384);

    var (part2, _) = slice_to_sep(in_msg, n);
    slice res = decode(part2);
    res~skip_bits(8);
    slice wc = first_bits(res, 2);
    res~skip_bits(8);
    res~skip_last_bits(16);

    ;; b{1000100} STSLICECONST
    slice possible_ref_addr = begin_cell().store_uint(68, 7).store_int(wc~load_int(2), 8).store_slice(res).end_cell().begin_parse();
    possible_ref_addr~skip_bits(4);

    ifnot (slice_equal(possible_ref_addr, s_addr) | slice_equal(possible_ref_addr, my_address())) {
      ref_addr = possible_ref_addr;
      fee -= 1; ;; player bonus
      ref_bonus = msg_value * 5 / 1000;
    }
  }

  int roll_under = str_to_num(part1);
  throw_if(40, (roll_under < 2) | (roll_under > 96));

  var (seqno, public_key, queue, locked, next_id) = load_data();
  int bank = get_balance().pair_first();
  int possible_payout = msg_value * (((100 - fee) * 1000000000) / (roll_under - 1)) / 1000000000;
  int liabilities = possible_payout + ref_bonus;
  int available_balance = bank - locked;

  throw_if(43, available_balance < 0);

  int max_win = available_balance / 4;

  throw_if(44, possible_payout > max_win);

  slice s = begin_cell()
      .store_uint(roll_under, 8)
      .store_grams(msg_value)
      .store_slice(s_addr)
      .store_slice(ref_addr)
      .store_grams(ref_bonus)
    .end_cell().begin_parse();
    
  randomize_lt();
  randomize(slice_hash(begin_cell()
      .store_uint(next_id, 32)
      .store_slice(s)
    .end_cell().begin_parse()));

  int rand_seed = random();

  int ok = queue~udict_add_builder?(32, next_id, begin_cell()
    .store_slice(s)
    .store_uint(rand_seed, 256));
  throw_unless(61, ok);

  set_data(begin_cell().store_uint(seqno, 32).store_uint(public_key, 256).store_dict(queue).store_grams(locked + liabilities).store_uint(next_id + 1, 32).end_cell());
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg~load_ref().begin_parse();
  int shash = slice_hash(cs);

  var (seqno, public_key, queue, locked, next_id) = load_data();

  int msg_seqno = cs~load_uint(32);
  int op = cs~load_uint(32);

  if (op == 0x22222222) {
    ;; resolve bet
    int bet_id = cs~load_uint(32);
    slice sig = cs~load_bits(512);
    resolve_bet(seqno, public_key, queue, locked, next_id, bet_id, sig);
    return ();
  }

  throw_unless(34, check_signature(shash, signature, public_key)); ;; owner check

  throw_unless(33, msg_seqno == seqno);

  if (op == 0x11111111) {
    ;; init
    accept_message();
  }
  if (op == 0x33333333) {
    ;; upgrade code
    var code = cs~load_ref();
    accept_message();
    set_code(code);
  }

  set_data(begin_cell().store_uint(seqno + 1, 32).store_uint(public_key, 256).store_dict(queue).store_grams(locked).store_uint(next_id, 32).end_cell());
}

;; Get methods

tuple active_bets() method_id {
  var (_, _, queue, _, _) = load_data();
  var id = 0;
  var list = null();
  var cnt = 0;
  do {
    var found = 0;
    if (cnt < 100) {
      (id, var bs, found) = queue.udict_get_next?(32, id);
      if (found) {
        var (roll_under, amount, player_addr, ref_addr, ref_bonus, seed) = unpack_bet(bs);
        list = cons(list, [id, [roll_under, amount, parse_std_addr(player_addr), parse_std_addr(ref_addr), ref_bonus, seed]]);
      }
    }
    cnt = cnt + 1;
  } until (~ found);
  return list;
}

int get_liabilities() method_id {
  (_, _, _, int locked, _) = load_data();
  return locked;
}