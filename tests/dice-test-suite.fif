#!/usr/bin/fift -s

"TonUtil.fif" include
"Asm.fif" include
"../build/dice-compiled.fif" include constant contract-code

"../addresses/owner.addr" load-address
2dup 2constant contract-addr

0 tuple 0x076ef1ea , // magic
0 , 0 , // actions msg_sents
1570998536 , // unix_time
1 , 1 , 3 , // block_lt, trans_lt, rand_seed
0 tuple 100000000000000 , dictnew , , // remaining balance
<b contract-addr addr, b> <s , dictnew , // contract_address, global_config
1 tuple // wrap to another tuple
constant c7

0 constant recv_internal // to run recv_internal()
-1 constant recv_external // to invoke recv_external()

"../keys/owner.pk" file>B constant owner_private_key
owner_private_key priv>pub constant owner_public_key

dictnew constant init-queue-dict

variable storage
variable message-to-sign
variable message-to-send
variable signature

// Test #1. Send wrong sequence number.

<b 0 32 u, owner_public_key B, init-queue-dict dict, 0 Gram, b> storage !

<b 1 32 u, x{11111111} s, b> message-to-sign !
message-to-sign @ hashu owner_private_key ed25519_sign_uint signature !
<b signature @ B, message-to-sign @ ref, b> <s message-to-send !

message-to-send @
recv_external
contract-code <s
storage @
c7
runvmctx

variable exit_code

drop
exit_code !
."Exit code " exit_code @ . cr
exit_code @ 33 <> abort"Test #1 Not passed"

// Test #2. Check owner's signature. Test must send correct seqno and correct signature expect 0.

<b 0 32 u, owner_public_key B, init-queue-dict dict, 0 Gram, b> storage !

<b 0 32 u, x{11111111} s, b> message-to-sign !
message-to-sign @ hashu owner_private_key ed25519_sign_uint signature !
<b signature @ B, message-to-sign @ ref, b> <s message-to-send !

message-to-send @
recv_external
contract-code <s
storage @
c7
runvmctx

variable exit_code

drop
exit_code !
."Exit code " exit_code @ . cr
exit_code @ 0 <> abort"Test #2 Not passed"

// Test #3. Throw exception when wrong signature provided.

"../keys/not-owner.pk" load-generate-keypair
=: not-owner-private-key
drop

<b 0 32 u, owner_public_key B, init-queue-dict dict, 0 Gram, b> storage !

<b 0 32 u, x{11111111} s, b> message-to-sign !
message-to-sign @ hashu not-owner-private-key ed25519_sign_uint signature !
<b signature @ B, message-to-sign @ ref, b> <s message-to-send !

message-to-send @
recv_external
contract-code <s
storage @
c7
runvmctx

variable exit_code

drop
exit_code !
."Exit code " exit_code @ . cr
exit_code @ 34 <> abort"Test #3 Not passed"

// Test #4. Sending an internal message with the correct game parameters -> a new bet should appear in the storage.

variable seqno
0 seqno !
variable locked-grams
0 locked-grams !

<b seqno @ 32 u, owner_public_key B, init-queue-dict dict, locked-grams @ Gram, b> storage !

"../addresses/sender.addr" load-address
2dup 2constant wallet-addr // -1:0000000000000000000000000000000000000000000000000000000000000000

variable roll-under
95 roll-under !
variable bet-id
19 bet-id !
variable amount
2000000000 amount !

roll-under @ (.) +"," bet-id @ (.) $+ constant game-params // Roll under 95, bet id 19
<b 0 32 u, game-params $, b> <s message-to-send !

<b b{1000100} s, wallet-addr addr, 0 Gram, b{00} s, b> constant meta

amount @
meta
message-to-send @
recv_internal
contract-code <s
storage @
c7
runvmctx

storage !

// == Parse storage to check

variable stored-slice
variable stored-seqno
variable stored-pubkey
variable stored-queue
variable stored-locked

storage @ <s stored-slice !
stored-slice @ 32 u@+ stored-slice !
stored-seqno !
stored-slice @ 32 B@+ stored-slice !
stored-pubkey !
stored-slice @ dict@+ stored-slice !
stored-queue !
stored-slice @ Gram@+ stored-slice !
stored-locked !

stored-seqno @ seqno @ <> abort"Test 4 failed. Reason: stored seqno is different from target."

amount @ 1000000000 - amount !

variable fee
2 fee !

{ amount @ 100 fee @ - * roll-under @ 1- / } : calc-payout

variable expected-payout
calc-payout 1000000000 + expected-payout !

expected-payout @ stored-locked @ = 1+ abort"Test 4 failed. Reason: stored liabilities is different from target."

variable stored-bet

variable stored-bet-roll-under
variable stored-bet-amount
variable stored-bet-player-addr
variable stored-bet-ref-addr
variable stored-bet-ref-bonus
variable stored-bet-seed

bet-id @ stored-queue @ 32 udict@ 1+
abort"Test 4 failed. Reason: bet with specified id not found."
stored-bet !

stored-bet @ 8 u@+ stored-bet !
stored-bet-roll-under !
stored-bet @ Gram@+ stored-bet !
stored-bet-amount !
stored-bet @ 1 i@+ 1 u@+ stored-bet ! // -1:0000000000000000000000000000000000000000000000000000000000000000
2constant stored-bet-player-addr
stored-bet @ 1 i@+ 256 u@+ stored-bet !
2constant stored-bet-ref-addr
stored-bet @ Gram@+ stored-bet !
stored-bet-ref-bonus !
stored-bet @ 256 u@+ stored-bet !
stored-bet-seed !

stored-bet @ remaining abort"Test 4 failed. Reason: storage data overflow."

// == End parse storage

roll-under @ stored-bet-roll-under @ =
variable is-roll-under-equal
is-roll-under-equal !
is-roll-under-equal @ 1 +
abort"Test 4 failed. Reason: stored bet roll-under is different from target."

amount @ stored-bet-amount @ =
variable is-amount-equal
is-amount-equal !
is-amount-equal @ 1 +
abort"Test 4 failed. Reason: stored bet amount is different from target."

<b wallet-addr addr, b> hashu
<b stored-bet-player-addr addr, b> hashu =
1 + abort"Test 4 failed. Reason: stored bet player address is different from target."

// <b contract-addr addr, b> hashu
// <b stored-bet-ref-addr addr, b> hashu =
// 1 + abort"Test 4 failed. Reason: stored bet referral address is different from target."

variable expected-ref-bonus
0 expected-ref-bonus !

expected-ref-bonus @ stored-bet-ref-bonus @ =
variable is-ref-bonus-equal
is-ref-bonus-equal !
is-ref-bonus-equal @ 1 +
abort"Test 4 failed. Reason: stored bet referral bonus is different from target."

stored-bet-seed @ 0 = abort"Test 4 failed. Reason: stored bet seed is null."